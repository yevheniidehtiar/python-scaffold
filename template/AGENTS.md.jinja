# AI Agent Guidelines

Welcome, agent! This document provides guidelines for working on this project.

This project is a Python `{{ project_type }}` generated from a template. It is configured with a `{{ development_environment }}` development environment.

## Project Structure

The main source code for this project is located in the `src/{{ project_name_snake_case }}` directory. Tests are in the `tests/` directory.

## Dependency Management

This project uses `uv` for dependency management. Dependencies are defined in `pyproject.toml`.

To install all dependencies, including development dependencies, run:

```bash
uv pip install -e .[dev]
```

## Task Runner: Poe the Poet

This project uses `poethepoet` as a task runner. You can see the available tasks in the `[tool.poe.tasks]` section of `pyproject.toml`.

To run a task, use `poe <task_name>`. For example:
- `poe lint`: Run linters.
- `poe test`: Run unit and integration tests.
- `poe test:e2e`: Run end-to-end tests.

## Development Process

This project advocates for a development process that prioritizes robust testing and early integration.

### The Assembly First Principle

Instead of building hyper-detailed components in isolation, we follow the **Assembly First Principle**. This means:

1.  **Build a Skeleton First**: Start by creating a simple, end-to-end, working version of the entire feature. Use placeholders, stubs, or simplified versions of components.
2.  **Define Data Flow**: Focus on how data moves through the system from one component to another.
3.  **Assemble and Verify**: Connect these simple components to create a functional, end-to-end skeleton. This provides a working version of the feature very early.
4.  **Iterate and Add Detail**: Once the overall structure is in place and working, go back and flesh out the details of each component, adding complexity, UI polish, and final logic.

This approach helps discover integration risks early, allows for earlier feedback, and results in a more cohesive system.

### Test-Driven Development (TDD)

Combine the Assembly First Principle with TDD. For each component you are fleshing out, write a failing test first, then write the code to make it pass, and finally refactor.

### End-to-End Testing with Playwright

All features should be tested from the user's perspective. This project is set up with Playwright for end-to-end testing.

**Running E2E Tests:**
To run the entire E2E test suite, use the following command:
```bash
poe test:e2e
```
This will install the necessary browser dependencies and run the tests located in `tests/e2e`.

**Interactive Development and Debugging:**
You are encouraged to use Playwright not just for final tests, but as a development tool. Use its features like the Trace Viewer and headed mode to interactively build and debug your feature from the UI down.

{% if with_fastapi_api %}
## Running the API Server

This project includes a FastAPI application. To run it in development mode (with hot-reloading), use the `serve` task:

```bash
poe serve --dev
```

The API will be available at `http://0.0.0.0:8000`. The API source code is in `src/{{ project_name_snake_case }}/api.py`.
{% endif %}

{% if with_typer_cli %}
## Running the CLI

This project includes a command-line interface (CLI) built with Typer.

Once you have installed the dependencies, the CLI is available as a command:

```bash
{{ project_name_kebab_case }} --help
```

The CLI source code is in `src/{{ project_name_snake_case }}/cli.py`.
{% endif %}

## Submitting Changes
{% if with_conventional_commits %}
This project follows the Conventional Commits specification. When you are ready to submit your work, please use `cz bump` to create a compliant commit message.
{% else %}
When you submit your work, please write a clear and descriptive commit message.
{% endif %}
